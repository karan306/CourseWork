#lang racket
(require 2htdp/universe)
(require 2htdp/image)
(require picturing-programs)
(require 2htdp/planetcute)


(define TOCK 0.02)
(define VEL-Y 500)

;;;;;;;;;;;;;;;;;;;;;;;; DAVE ;;;;;;;;;;;;;;;;;;;;;;;

(define dave-vector
  (let ((T (square 4 "solid" "transparent"))
        (R (square 4 "solid" "red"))
        (H (square 4 "solid" "brown"))
        (S (square 4 "solid" "navajowhite"))
        (P (square 4 "solid" "darkviolet"))
        (W (square 4 "solid" "white"))
        (G (square 4 "solid" "gray"))
        (DB (square 4 "solid" "darkblue"))
        (B (square 4 "solid" "skyblue"))
        (DR (square 4 "solid" "darkred")))
    (vector (vector T T T T DR R R R R DR T T T T T)
            (vector T T T T DR R R R R R R R DR T T)
            (vector T T T T H H H S P S T T T T T)
            (vector T T T T H S H S S S S T T T T) 
            (vector T T T T T S S S S T T T T T T)
            (vector T T T T T W W G T T T T T T T)
            (vector T T T T W W G W G T T T T T T)
            (vector T T T T S S G W W S T T T T T)
            (vector T T T S S S G W W S S T T T T)
            (vector T S S S S T G W W B S S S S T)
            (vector T S S T DB B DB B DB DB T S S S T)
            (vector T T T DB B B DB T B DB T T T T T)
            (vector T T DB B B DB T T T B DB DB T G T)
            (vector T T W B DB T T T T T B DB G T T)
            (vector T T T W G G T T T T W G T T T))))

(define dave-vector-st
  (let ((T (square 4 "solid" "transparent"))
        (R (square 4 "solid" "red"))
        (H (square 4 "solid" "brown"))
        (S (square 4 "solid" "navajowhite"))
        (P (square 4 "solid" "darkviolet"))
        (W (square 4 "solid" "white"))
        (G (square 4 "solid" "gray"))
        (DB (square 4 "solid" "darkblue"))
        (B (square 4 "solid" "skyblue"))
        (DR (square 4 "solid" "darkred")))
    (vector (vector T T T T DR R R R R DR T T T T T)
            (vector T T T T DR R R R R R R R DR T T)
            (vector T T T T H H H S P S T T T T T)
            (vector T T T T H S H S S S S T T T T) 
            (vector T T T T T S S S S T T T T T T)
            (vector T T T T T W W G T T T T T T T)
            (vector T T T T W W W W G T T T T T T)
            (vector T T T T S S G W W S T T T T T)
            (vector T T T T S S G W W S S T T T T)
            (vector T T T T S S G W W T S T T T T)
            (vector T T T T DB S S S DB DB T T T T T)
            (vector T T T T DB B DB T B DB T T T T T)
            (vector T T T T DB B DB T B DB T T T T T)
            (vector T T T T DB B DB T B DB T T T T T)
            (vector T T T T T B W G T B W G T T T))))

(define dave-vector-jp
  (let ((T (square 4 "solid" "transparent"))
        (R (square 4 "solid" "red"))
        (H (square 4 "solid" "brown"))
        (S (square 4 "solid" "navajowhite"))
        (P (square 4 "solid" "darkviolet"))
        (W (square 4 "solid" "white"))
        (G (square 4 "solid" "gray"))
        (DB (square 4 "solid" "darkblue"))
        (B (square 4 "solid" "skyblue"))
        (DR (square 4 "solid" "darkred")))
    (vector (vector T T T T DR R R R R DR T T T T T)
            (vector T T T T DR R R R R R R R DR T T)
            (vector T T T T H H H S P S T T T T T)
            (vector T T T T H S H S S S S T T T T) 
            (vector T T T T T S S S S T T T T T T)
            (vector T T T T T W W G T T T T T T T)
            (vector T T T T S W W W W T T T T T T)
            (vector T T S S S S G W W S T T S S T)
            (vector T S S S T G W W W S S S S S T)
            (vector S S S T DB B DB DB B DB S S T T T)
            (vector W B B DB B B DB T B B B DB DB T T)
            (vector W B B B B DB T T T DB B B DB T T)
            (vector W G T T T T T T T T W W W G T)
            (vector T T T T T T T T T T T T T T T)
            (vector T T T T T T T T T T T T T T T))))

(define (view-dav level)
  (view-vec level 15 15))

(define (view-vec level r c)
  (define i 1)
  (define j 1)
  (define vec (vector-ref level 0))
  (define image (vector-ref vec 0))
  (define (loopr)
    (when (< j r)
      (begin (set! image
                   (beside/align "top" image (vector-ref vec j)))
             (set! j (add1 j))
             (loopr))))
  (loopr)
  (define (loopi)
    (when (< i c)
      (begin (define j 1)
             (define vec (vector-ref level i))
             (define img (vector-ref vec 0))
             (define (loopj)
               (when (< j r)
                 (begin (set! img
                              (beside/align "top" img (vector-ref vec j)))
                        (set! j (add1 j))
                        (loopj))))
             (loopj)
             (set! image (above/align "left" image img))
             (set! i (+ i 1))
             (loopi))))
  (begin (loopi) image))


(define dave-R (view-dav dave-vector))
(define dave-L (reflect-horiz dave-R))
(define dave-st-R (view-dav dave-vector-st))
(define dave-st-L (reflect-horiz dave-st-R))
(define dave-jp-R (view-dav dave-vector-jp))
(define dave-jp-L (reflect-horiz dave-jp-R))



(define (vec-ref vec r c)
  (vector-ref r(vector-ref vec r) c))
(define (vec-set! vec r c val)
  (let ((v (vector-ref vec r)))
    (begin
      (vector-set! v c val)
      (vector-set! vec r v))))


(define E (square 60 "solid" "black"))
(define B (crop 10 60 60 60 dirt-block))
(define K (overlay (crop -5 20 60 60 (scale 0.5 key)) E))
(define D (overlay (crop -5 25 60 60 (scale 0.5 gem-green)) E))
(define C (overlay (crop -5 20 60 60 (scale 0.5 yellow-star)) E))
(define G (overlay (scale/xy (/ 60 101) (/ 60 101) (crop 0 70 101 101 door-tall-closed)) (square 60 "solid" "black")))
(define W (crop 10 60 60 60 water-block))  


(define level1 
  (vector (vector B B B B B B B B B B B B B B B B B B B)
          (vector B D E E E E E E E E E E E E E E E D B)
          (vector B E E C E E E C E E E E E E E C E E B)
          (vector B E E B E E E B E E E B E E E B E E B)
          (vector B C E E E C E E E C E E E C E E E C B)
          (vector B B E E E B E E E B E E E B E E E B B)
          (vector B C E E E E C E E E E E C E K C E E B)
          (vector B E E E B B B E E E E B B B B B E E B)
          (vector B E E E E E C E E E E B G E E E E E B)
          (vector B B B B B B B B B B B B B B B B B B B)
          ))

(define level2-1
  (vector (vector B B B B B B B B B B B B B B B B B B B)
          (vector B D E E E E E C E E E E E E E E E E C)
          (vector B E E E E E E E E E E E E E E E E E E)
          (vector B B E E B E E E E E E E E B E E E E E)
          (vector B E E E E E E E B B B E E E B E E E E)
          (vector B E B B E E E E E B E E E D B E B B B)
          (vector B E E E E E C E E B E B E E B E E E E)
          (vector B E E E B B B E E B E E E E B E E E E)
          (vector B E E E E E E E E B E E E B B E E E E)
          (vector B B B W W W W W W B W W W W B W W W W)
          ))

(define level2-2
  (vector (vector B B B B B B B B B B B B B B B B B B B)
          (vector E E E C E E E E E E E E E E E B B E E)
          (vector E E E E E E E E E B B B B B E B B E B)
          (vector E E E E E E E E B B E E E E E B B E E)
          (vector E E E E E E E B B E E B B B B B B B B)
          (vector E B B B B B E B E E B B E C B E E E E)
          (vector E E E E E E E B E B E E E E B E E B E)
          (vector E E E E E E E B E B E B B E B E B B E)
          (vector E E E E E E E B E E E B C E E E E B E)
          (vector W W W W W W W B B B B B B B B B B B B)
          ))

(define level2-3
  (vector (vector B B B B B B B B B B B B B B B B B B B)
          (vector B B E E E E E E E E E E E E E E G B B)
          (vector B B E B B B B B B B B B B B B B B B B)
          (vector B B E E E E E B E E E E E E E E E E E)
          (vector B B B B B E E B E E E E E E E E E E E)
          (vector E E E E B E E B E E E E E E E E E E E)
          (vector E E B E B E B B E E E E E E E E E E E)
          (vector E B B E E E E B E E E E E E E E E E E)
          (vector E E B E E B E B E E E E E E E E E E E)
          (vector B B B B B B B B W B W W W W B W W W W)
          ))



(define transition
  (vector (vector E E E E E E E E E E E E E E E E E E E)
          (vector E E E E E E E E E E E E E E E E E E E)
          (vector E E E E E E E E E E E E E E E E E E E)
          (vector E E E E E E E E E E E E E E E E E E E)
          (vector B B B B B B B B B B B B B B B B B B B)
          (vector G E E E E E E E E E E E E E E E E E E)
          (vector B B B B B B B B B B B B B B B B B B B)
          (vector E E E E E E E E E E E E E E E E E E E)
          (vector E E E E E E E E E E E E E E E E E E E)
          (vector E E E E E E E E E E E E E E E E E E E)))



(define (view level)
  (view-vec level 19 10))

(define (next-level lif)
  (begin (define dav (make-object DAVE%))
         (set-field! life dav lif)
         (set-field! X dav 60)
         (set-field! Y dav 300)
         (set-field! X2 dav 120)
         (set-field! Y2 dav 360)
         (set-field! V-x dav 500)
         (make-gs transition dav)))
  

(define DAVE%
  (class object%
    (field [image dave-st-R])
    (field [X 60])
    (field [Y 480])
    (field [X2 120])
    (field [Y2 540])
    (field [no-of-ticks 0])
    (field [V-y 0])
    (field [V-x 0])
    (field [life 3])
    (field [key? 0])
    (super-new)
    (define/public (increment-tick)
      (set! no-of-ticks (+ 1 no-of-ticks)))
    (define/public (increment-x delta)
      (begin (set! X (+ X delta)) (set! X2 (+ X2 delta))))
    (define/public (increment-y delta)
      (begin (set! Y (+ Y delta)) (set! Y2 (+ Y2 delta))))
    (define/public (move level delta l-r)
       (let* ((y1 (quotient Y 60))
             (y2 (quotient Y2 60))
             (x (if (= l-r 0) (quotient (+ X (/ delta 2)) 60) (quotient (+ X2 (/ delta 2)) 60)))
             (x1 (if (= l-r 0) (quotient (+ X delta) 60) (quotient (+ X2 delta) 60)))
             (top (vec-ref level y1 x))
             (bottom (vec-ref level y2 x)))
        (cond [(not (= (remainder Y2 60) 0))
               (begin
                 (cond [(not (or (equal? top B) (equal? bottom B)))
                      (when (= no-of-ticks 0) (set! V-y (* -1 VEL-Y)))
                      (begin (when (equal? top C) (begin (vec-set! level y1 x1 E)
                                                         (set-field! coins score (+ (get-field coins score) 1))
                                                         (set-field! total score
                                                                     (+ (get-field total score) 10))))
                             (when (equal? bottom C) (begin (vec-set! level y2 x1 E)
                                                            (set-field! coins score (+ (get-field coins score) 1))
                                                            (set-field! total score
                                                                        (+ (get-field total score) 10))))
                             (when (or (equal? top F) (equal? top W) (equal? bottom F) (equal? bottom W))
                               (begin (set! life (- life 1))
                                                             (set! X 60)
                                                             (set! X2 120)
                                                             (set! Y 480)
                                                             (set! Y2 540)))
                             (when (equal? top D) (begin (vec-set! level y1 x1 E)
                                                         (set-field! diamonds score (+ (get-field diamonds score) 1))
                                                         (set-field! total score
                                                                     (+ (get-field total score) 100))))
                             (when (equal? bottom D) (begin (vec-set! level y2 x1 E)
                                                            (set-field! diamonds score (+ (get-field diamonds score) 1))
                                                            (set-field! total score
                                                                        (+ (get-field total score) 100))))
                             (when (equal? bottom K) (begin (vec-set! level y2 x1 E) (set! key? 1)))
                             (when (equal? top K) (begin (vec-set! level y1 x1 E) (set! key? 1)))
                             (when (or (equal? top G) (equal? bottom G))
                               (cond [(= key? 1) (begin
                                                   (set! level transition)
                                                   (set! image dave-st-R)
                                                   (set! X 60)
                                                   (set! Y 300)
                                                   (set! X2 120)
                                                   (set! Y2 360)
                                                   (set! V-x 500))]))
                             (if (or (equal? image dave-st-R) (equal? image dave-st-L))
                                 (set! image (if (= l-r 0) dave-L dave-R))
                                 (set! image (if (= l-r 0) dave-st-L dave-st-R)))
                             (increment-x delta))])
                 (make-gs level this))]
              [else  (begin (cond [(not (equal? top B))
                            (when (= no-of-ticks 0) (set! V-y (* -1 VEL-Y)))
                            (begin (when (equal? top C) (begin (vec-set! level y1 x1 E)
                                                               (set-field! coins score (+ (get-field coins score) 1))
                                                               (set-field! total score
                                                                           (+ (get-field total score) 10))))
                                   (when (or (equal? top F) (equal? top W))
                                     (begin (set! life (- life 1))
                                                             (set! X 60)
                                                             (set! X2 120)
                                                             (set! Y 480)
                                                             (set! Y2 540)))
                                   (when (equal? top D) (begin (vec-set! level y1 x1 E)
                                                               (set-field! diamonds score (+ (get-field diamonds score) 1))
                                                               (set-field! total score
                                                                           (+ (get-field total score) 100))))
                                   (when (equal? top K) (begin (vec-set! level y1 x1 E) (set! key? 1)))
                                   (when (or (equal? top G) (equal? bottom G))
                                     (cond [(= key? 1) (begin
                                                   (set! level transition)
                                                   (set! image dave-st-R)
                                                   (set! X 60)
                                                   (set! Y 300)
                                                   (set! X2 120)
                                                   (set! Y2 360)
                                                   (set! V-x 500))]))
                                   (if (or (equal? image dave-st-R) (equal? image dave-st-L))
                                       (set! image (if (= l-r 0) dave-L dave-R))
                                       (set! image (if (= l-r 0) dave-st-L dave-st-R)))
                                   (increment-x delta))])
                            (make-gs level this))])))
             
    (define/public (move-right level)
      (move level 20 1))
    (define/public (move-left level)
      (move level -20 0))
    (define/public (move-up level)
      (let ((left (vec-ref level (quotient (+ Y2 5) 60) (quotient X 60)))
            (right (vec-ref level (quotient (+ Y2 5) 60) (quotient X2 60))))
       (if (= (remainder X 60) 0) (cond [(equal? left B) (set! V-y VEL-Y)])
           (cond [(or (equal? left B) (equal? right B)) (set! V-y VEL-Y)])))) 	 
    ))
    

(define DAVE (make-object DAVE%))
(define-struct gs(level dave) #:transparent #:mutable)

(define score%
  (class object%
    (field [coins 0])
    (field [diamonds 0])
    (field [total 0])
    (field [time 0])
    (super-new)))
(define score (make-object score%))


(define (give gs)
  (overlay/xy (get-field image (gs-dave gs)) (* -1 (get-field X (gs-dave gs)))
              (* -1 (get-field Y (gs-dave gs))) (view (gs-level gs))))

(define (key-handler gs key)
  (cond [(key=? "left"  key) (send (gs-dave gs) move-left (gs-level gs))]
        [(key=? "right"  key) (send (gs-dave gs) move-right (gs-level gs))]
        [(key=? "up"  key) (begin
                             (send (gs-dave gs) move-up (gs-level gs))
                             gs)]
        [else gs]))
 
(define (tick gs)
  (let* ((Dav (gs-dave gs))
         (level (gs-level gs))
         (Vx (get-field V-x Dav))
         (Y1 (get-field Y Dav))
         (Y2 (get-field Y2 Dav))
         (X1 (get-field X Dav))
         (y1 (quotient Y1 60))
         (y2 (quotient Y2 60))
         (x1 (quotient (get-field X Dav) 60))
         (x2 (quotient (get-field X2 Dav) 60))
         (Vy (get-field V-y Dav))
         (delta-y (inexact->exact (* TOCK Vy -1)))
         (tick-no (get-field no-of-ticks Dav))
         (life (get-field life Dav)))
    (begin
      (cond  [(> Vx 0)
              (if (>= X1 1080) (let* ((d (make-object DAVE%)))
                                 (begin
                                   (set-gs-dave! gs d)
                                   (set-gs-level! gs level2-1)))
                  (send Dav move-right level))]
             [(and (> Vy 0) (< tick-no 15))
              (let* ((y (quotient (- Y1 2) 60))
                     (left (vec-ref level y x1))
                     (right (vec-ref level y x2)))
                (if (not (= (remainder X1 60) 0))
                    (cond [(or (equal? left B) (equal? right B)) (begin (set-field! V-y Dav (* -1 Vy))
                                                                        (set-field! no-of-ticks Dav 0))]
                          [else (begin (when (equal? left C) (begin (vec-set! level y1 x1 E)
                                                                    (set-field! coins score (+ (get-field coins score) 1))
                                                                    (set-field! total score
                                                                                (+ (get-field total score) 10))))
                                       (when (equal? right C) (begin (vec-set! level y1 x2 E)
                                                                     (set-field! coins score (+ (get-field coins score) 1))
                                                                     (set-field! total score
                                                                                 (+ (get-field total score) 10))))
                                       (when (or (equal? left F) (equal? left W) (equal? right F) (equal? right W))
                                       (begin (set-field! life Dav (- life 1))
                                                             (set-field! X Dav 60)
                                                             (set-field! X2 Dav 120)
                                                             (set-field! Y Dav 480)
                                                             (set-field! Y2 Dav 540)))
                                       (when (equal? left D) (begin (vec-set! level y1 x1 E)
                                                                    (set-field! diamonds score (+ (get-field diamonds score) 1))
                                                                    (set-field! total score
                                                                                (+ (get-field total score) 100))))
                                       (when (equal? right D) (begin (vec-set! level y1 x2 E)
                                                                     (set-field! diamonds score (+ (get-field diamonds score) 1))
                                                                     (set-field! total score
                                                                                 (+ (get-field total score) 100))))
                                       (when (equal? left K) (begin (vec-set! level y1 x1 E) (set-field! key? Dav 1)))
                                       (when (equal? right K) (begin (vec-set! level y1 x2 E) (set-field! key? Dav 1)))
                                       (when (or (equal? left G) (equal? right G))
                                         (cond [(= (get-field key? Dav) 1)
                                                (begin
                                                  (set-gs-level! gs transition)
                                                  (set-field! V-x Dav 500)
                                                  (set-field! X Dav 60)
                                                  (set-field! X2 Dav 120)
                                                  (set-field! Y Dav 290)
                                                  (set-field! Y2 Dav 350))]))
                                       (let ((image (get-field image Dav)))
                                         (if (or (equal? image dave-L)
                                                 (equal? image dave-st-L)
                                                 (equal? image dave-jp-L))
                                             (set-field! image Dav dave-jp-L)
                                             (set-field! image Dav dave-jp-R)))
                                       (send Dav increment-y delta-y)
                                       (send Dav increment-tick))])
                    (cond [(equal? left B) (begin (set-field! V-y Dav (* -1 Vy))
                                                  (set-field! no-of-ticks Dav 0))]
                          [else (begin (when (equal? left C) (begin (vec-set! level y1 x1 E)
                                                                    (set-field! coins score (+ (get-field coins score) 1))
                                                                    (set-field! total score
                                                                                (+ (get-field total score) 10))))
                                       (when (or (equal? left F) (equal? left W))
                                       (begin (set-field! life Dav (- life 1))
                                                             (set-field! X Dav 60)
                                                             (set-field! X2 Dav 120)
                                                             (set-field! Y Dav 480)
                                                             (set-field! Y2 Dav 540)))
                                       (when (equal? left D) (begin (vec-set! level y1 x1 E)
                                                                    (set-field! diamonds score (+ (get-field diamonds score) 1))
                                                                    (set-field! total score
                                                                                (+ (get-field total score) 100))))
                                       (when (equal? left K) (begin (vec-set! level y1 x1 E) (set-field! key? Dav 1)))
                                       (when (equal? left G)
                                         (cond [(= (get-field key? Dav) 1)
                                                (begin
                                                  (set-gs-level! gs transition)
                                                  (set-field! V-x Dav 500)
                                                  (set-field! X Dav 60)
                                                  (set-field! X2 Dav 120)
                                                  (set-field! Y Dav 290)
                                                  (set-field! Y2 Dav 350))]))
                                       (let ((image (get-field image Dav)))
                                         (if (or (equal? image dave-L)
                                                 (equal? image dave-st-L)
                                                 (equal? image dave-jp-L))
                                             (set-field! image Dav dave-jp-L)
                                             (set-field! image Dav dave-jp-R)))
                                       (send Dav increment-y delta-y)
                                       (send Dav increment-tick))]))
                )]
             [(= tick-no 15) (begin (set-field! V-y Dav (* -1 Vy)) (set-field! no-of-ticks Dav 0))]
             [(< Vy 0)
              (let* ((y (quotient (+ Y2 2) 60))
                     (left (vec-ref level y x1))
                     (right (vec-ref level y x2)))
                (if (not (= (remainder X1 60) 0))
                    (cond [(or (equal? left B) (equal? right B))
                           (when (= (remainder Y1 60) 0)
                             (begin (set-field! V-y Dav 0) (let ((image (get-field image Dav)))
                                                            (if (or (equal? image dave-L)
                                                                    (equal? image dave-st-L)
                                                                    (equal? image dave-jp-L))
                                                                (set-field! image Dav dave-st-L)
                                                                (set-field! image Dav dave-st-R)))))]
                          [else (begin (when (equal? left C) (begin (vec-set! level y2 x1 E)
                                                                    (set-field! coins score (+ (get-field coins score) 1))
                                                                    (set-field! total score
                                                                                (+ (get-field total score) 10))))
                                       (when (equal? right C) (begin (vec-set! level y2 x2 E)
                                                                     (set-field! coins score (+ (get-field coins score) 1))
                                                                     (set-field! total score
                                                                                 (+ (get-field total score) 10))))
                                       (when (or (equal? left F) (equal? left W) (equal? right F) (equal? right W))
                                         (begin (set-field! life Dav (- life 1))
                                                             (set-field! X Dav 60)
                                                             (set-field! X2 Dav 120)
                                                             (set-field! Y Dav 480)
                                                             (set-field! Y2 Dav 540)))
                                       (when (equal? left D) (begin (vec-set! level y2 x1 E)
                                                                    (set-field! diamonds score (+ (get-field diamonds score) 1))
                                                                    (set-field! total score
                                                                                (+ (get-field total score) 100))))
                                       (when (equal? right D) (begin (vec-set! level y2 x2 E)
                                                                     (set-field! diamonds score (+ (get-field diamonds score) 1))
                                                                     (set-field! total score
                                                                                 (+ (get-field total score) 100))))
                                       (when (equal? left K) (begin (vec-set! level y2 x1 E) (set-field! key? Dav 1)))
                                       (when (equal? right K) (begin (vec-set! level y2 x2 E) (set-field! key? Dav 1)))
                                       (when (or (equal? left G) (equal? right G))
                                         (cond [(= (get-field key? Dav) 1)
                                                (begin
                                                  (set-gs-level! gs transition)
                                                  (set-field! V-x Dav 500)
                                                  (set-field! X Dav 60)
                                                  (set-field! X2 Dav 120)
                                                  (set-field! Y Dav 290)
                                                  (set-field! Y2 Dav 350))]))
                                       (send Dav increment-y delta-y))])
                    (cond [(equal? left B)
                           (when (= (remainder Y1 60) 0)
                             (begin (set-field! V-y Dav 0) (let ((image (get-field image Dav)))
                                                            (if (or (equal? image dave-L)
                                                                    (equal? image dave-st-L)
                                                                    (equal? image dave-jp-L))
                                                                (set-field! image Dav dave-st-L)
                                                                (set-field! image Dav dave-st-R)))))]
                          [else (begin (when (equal? left C) (begin (vec-set! level y2 x1 E)
                                                                    (set-field! coins score (+ (get-field coins score) 1))
                                                                    (set-field! total score
                                                                                (+ (get-field total score) 10))))
                                       (when (or (equal? left F) (equal? left W))
                                       (begin (set-field! life Dav (- life 1))
                                                             (set-field! X Dav 60)
                                                             (set-field! X2 Dav 120)
                                                             (set-field! Y Dav 480)
                                                             (set-field! Y2 Dav 540)))
                                       (when (equal? left D) (begin (vec-set! level y2 x1 E)
                                                                    (set-field! diamonds score (+ (get-field diamonds score) 1))
                                                                    (set-field! total score
                                                                                (+ (get-field total score) 100))))
                                       (when (equal? left K) (begin (vec-set! level y2 x1 E) (set-field! key? Dav 1)))
                                       (when (or (equal? left G) (equal? right G))
                                         (cond [(= (get-field key? Dav) 1)
                                                (begin
                                                  (set-gs-level! gs transition)
                                                  (set-field! V-x Dav 500)
                                                  (set-field! X Dav 60)
                                                  (set-field! X2 Dav 120)
                                                  (set-field! Y Dav 290)
                                                  (set-field! Y2 Dav 350))]))
                                       (send Dav increment-y delta-y))])))]
             ))
    gs))
 
(define (main)
  (local ((define obj (gs level1 DAVE)))
    (big-bang obj
              (on-key key-handler)
              (on-tick tick TOCK)
              ;(stop-when (= (get-field life (gs-dave obj)) 0) end-image)
              (to-draw give))))



